// Generated by gencpp from file deep_learning/Burak.msg
// DO NOT EDIT!


#ifndef DEEP_LEARNING_MESSAGE_BURAK_H
#define DEEP_LEARNING_MESSAGE_BURAK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace deep_learning
{
template <class ContainerAllocator>
struct Burak_
{
  typedef Burak_<ContainerAllocator> Type;

  Burak_()
    : type(0)
    , steering(0.0)
    , hasObstacle(false)  {
    }
  Burak_(const ContainerAllocator& _alloc)
    : type(0)
    , steering(0.0)
    , hasObstacle(false)  {
  (void)_alloc;
    }



   typedef int32_t _type_type;
  _type_type type;

   typedef float _steering_type;
  _steering_type steering;

   typedef uint8_t _hasObstacle_type;
  _hasObstacle_type hasObstacle;





  typedef boost::shared_ptr< ::deep_learning::Burak_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::deep_learning::Burak_<ContainerAllocator> const> ConstPtr;

}; // struct Burak_

typedef ::deep_learning::Burak_<std::allocator<void> > Burak;

typedef boost::shared_ptr< ::deep_learning::Burak > BurakPtr;
typedef boost::shared_ptr< ::deep_learning::Burak const> BurakConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::deep_learning::Burak_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::deep_learning::Burak_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace deep_learning

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'deep_learning': ['/home/nvidia/racecar-ws/src/racecar-controllers/deep_learning/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::deep_learning::Burak_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::deep_learning::Burak_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deep_learning::Burak_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deep_learning::Burak_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deep_learning::Burak_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deep_learning::Burak_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::deep_learning::Burak_<ContainerAllocator> >
{
  static const char* value()
  {
    return "30cabddebe002ba107d2c72ae8a924cb";
  }

  static const char* value(const ::deep_learning::Burak_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x30cabddebe002ba1ULL;
  static const uint64_t static_value2 = 0x07d2c72ae8a924cbULL;
};

template<class ContainerAllocator>
struct DataType< ::deep_learning::Burak_<ContainerAllocator> >
{
  static const char* value()
  {
    return "deep_learning/Burak";
  }

  static const char* value(const ::deep_learning::Burak_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::deep_learning::Burak_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 type\n\
float32 steering\n\
bool hasObstacle\n\
";
  }

  static const char* value(const ::deep_learning::Burak_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::deep_learning::Burak_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.steering);
      stream.next(m.hasObstacle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Burak_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::deep_learning::Burak_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::deep_learning::Burak_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "steering: ";
    Printer<float>::stream(s, indent + "  ", v.steering);
    s << indent << "hasObstacle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hasObstacle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEEP_LEARNING_MESSAGE_BURAK_H
